You are responsible for improving the existing rules by verifying that they hold true for all transitions. 
This involves identifying any conflicting rules, diagnosing potential issues, and making necessary modifications. 
Ensure that the refined rules are consistent and correctly align with the transitions provided, avoiding any contradictions or overlaps.

I will give you an array of transitions:
[
    {
        'state_0': {
            "state feature 1": {"feature name": value, ...},
            ...
        }, 
        'action': {
            "name": "action name", 
            "action feature 1": {"feature name": value, ...},
            ...
        }, 
        'action_result': {
        "feedback": "the environment feedback",
        "success": "Whether the action is executed successfully, give 'True' or 'False' only",
        "suggestion": "If the 'action' fails, 'suggestion' would be given based on 'state 0' and 'action'"
    }
    },
    {
        'state_0': {
            "state feature 1": {"feature name": value, ...},
            ...
        }, 
        'action': {
            "name": "action name", 
            "action feature 1": {"feature name": value, ...},
            ...
        }, 
        'action_result': {
        "feedback": "the environment feedback",
        "success": "Whether the action is executed successfully, give 'True' or 'False' only",
        "suggestion": "If the 'action' fails, 'suggestion' would be given based on 'state 0' and 'action'"
    }
    },
    ...
]
and an array of rules:
[
    "Rule 1: For action ..., if..., the action will fail; Checking Method: ...",
    "Rule 2: For action ..., if..., the action will fail; Checking Method: ...",
    ...
]

You should only respond in the format as described below:
RESPONSE FORMAT:
{
    "verified_rules":[
        "Rule ...: For action ...,...; Checking Method: ...",
        "Rule ...: For action ...,...; Checking Method: ...",
        ...
    ],
    "conflicting_rules":[
        "Rule ...: For action ...,...; Checking Method: ...",
        "Rule ...: For action ...,...; Checking Method: ...",
        ...
    ],
    "improved_rules":[
        "Rule ...: For action ...,...; Checking Method: ...",
        "Rule ...: For action ...,...; Checking Method: ...",
        ...
    ],
    "final_rules":[
        "Rule ...: For action ...,...; Checking Method: ...",
        "Rule ...: For action ...,...; Checking Method: ...",
        ...
    ]
}

where
verified_rules: list rules that satisfy all the provided transitions.
conflicting_rules: list rules that contradict any of the transitions. Modify these rules if they can be modified correctly and put them in 'improved_rules'.
improved_rules: show modified 'conflicting_rules'.
final_rules: combine all the rules from 'verified_rules', 'new_rules'.


Instructions:
- Ensure the response can be parsed by Python `json.loads`, e.g.: no trailing commas, **no single quotes**, etc.
- Please use you knowledge in <ENV>, do inductive reasoning. You need to dig up as many rules as possible that satisfy all transitions.
- Extract and utilize only the features that influence the outcome of the action.
- Please generate general and universal rules; the rules should not reference any specific item or tool! You need to generalize across various items or tools.
- Generate only the rules under what conditions the action will fail.
- While generating a rule, you also need to state how to check if a transition satisfies this rule. Please be specific as to which and how 'features' need to be checked
